rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return request.auth.token.role == role;
    }
    
    function isActive() {
      return request.auth.token.isActive == true;
    }
    
    function isValidUser() {
      return isAuthenticated() && isActive();
    }
    
    function isAuthorityOrAdmin() {
      return hasRole('authority') || hasRole('admin');
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isCitizen() {
      return hasRole('citizen');
    }
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read: if isValidUser() && (isOwner(userId) || isAuthorityOrAdmin());
      allow write: if isValidUser() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Admin can update user roles and status
      allow update: if isAdmin() && 
        (request.writeFields.hasOnly(['role', 'isActive', 'updatedAt']) ||
         request.writeFields.hasOnly(['fcmToken', 'tokenUpdatedAt']));
    }
    
    // Issues collection - role-based access
    match /issues/{issueId} {
      // Citizens can read all issues but only create/update their own
      allow read: if isValidUser();
      allow create: if isValidUser() && isCitizen() && 
        request.auth.uid == resource.data.reporterId;
      allow update: if isValidUser() && 
        (isOwner(resource.data.reporterId) || isAuthorityOrAdmin());
      
      // Validate issue data on create/update
      allow create: if validateIssueData();
      allow update: if validateIssueUpdate();
    }
    
    // Categories are read-only for all authenticated users
    match /categories/{categoryId} {
      allow read: if isValidUser();
      allow write: if isAdmin();
    }
    
    // Alerts collection - authorities and admins can manage
    match /alerts/{alertId} {
      allow read: if isValidUser();
      allow write: if isAuthorityOrAdmin();
      
      // Validate alert data
      allow create, update: if validateAlertData();
    }
    
    // Notifications are user-specific
    match /notifications/{notificationId} {
      allow read, write: if isValidUser() && 
        isOwner(resource.data.userId);
    }
    
    // Analytics collections - restricted access
    match /daily_analytics/{analyticsId} {
      allow read: if isAuthorityOrAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    match /statistics/{statsId} {
      allow read: if isAuthorityOrAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Analytics are authority/admin only
    match /analytics/{reportId} {
      allow read: if isAuthorityOrAdmin();
      allow write: if isAuthorityOrAdmin();
    }
    
    // Feedback collection - users can only access their own feedback
    match /feedback/{feedbackId} {
      allow read: if isValidUser();
      allow create: if isValidUser() && 
        isOwner(resource.data.userId);
      allow update: if isValidUser() && 
        isOwner(resource.data.userId);
    }
    
    // Notification logs - admin only
    match /notification_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Public read-only collections for transparency
    match /public_issues/{issueId} {
      allow read: if true; // Public read access
      allow write: if false; // Only Cloud Functions can write
    }
    
    match /public_statistics/{statsId} {
      allow read: if true; // Public read access
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Rate limiting - prevent spam
    match /rate_limits/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Audit logs - admin only
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Validation functions
    function validateIssueData() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'description', 'category', 'priority', 'location', 'reporterId']) &&
        data.title is string && data.title.size() >= 5 && data.title.size() <= 200 &&
        data.description is string && data.description.size() >= 10 && data.description.size() <= 2000 &&
        data.category in ['daily_life', 'emergency', 'general'] &&
        data.priority in ['low', 'medium', 'high', 'emergency'] &&
        data.location is map &&
        data.location.keys().hasAll(['latitude', 'longitude', 'address']) &&
        data.location.latitude is number && data.location.latitude >= -90 && data.location.latitude <= 90 &&
        data.location.longitude is number && data.location.longitude >= -180 && data.location.longitude <= 180 &&
        data.reporterId == request.auth.uid &&
        data.status in ['submitted', 'acknowledged', 'in_progress', 'resolved', 'closed', 'rejected'];
    }
    
    function validateIssueUpdate() {
      let data = request.resource.data;
      let existingData = resource.data;
      
      // Citizens can only update their own issues and limited fields
      if (isCitizen() && isOwner(existingData.reporterId)) {
        return request.writeFields.hasOnly(['feedback', 'updatedAt']) ||
               (existingData.status == 'submitted' && 
                request.writeFields.hasOnly(['title', 'description', 'images', 'updatedAt']));
      }
      
      // Authorities can update status and add comments
      if (isAuthorityOrAdmin()) {
        return data.status in ['submitted', 'acknowledged', 'in_progress', 'resolved', 'closed', 'rejected'] &&
               (data.assignedTo == null || data.assignedTo is string) &&
               (data.comments == null || data.comments is list);
      }
      
      return false;
    }
    
    function validateAlertData() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'message', 'type', 'priority', 'city', 'isActive']) &&
        data.title is string && data.title.size() >= 5 && data.title.size() <= 200 &&
        data.message is string && data.message.size() >= 10 && data.message.size() <= 2000 &&
        data.type in ['emergency', 'road_construction', 'news', 'general'] &&
        data.priority in ['low', 'medium', 'high', 'critical'] &&
        data.city is string && data.city.size() > 0 &&
        data.isActive is bool &&
        (data.radiusKm == null || (data.radiusKm is number && data.radiusKm > 0 && data.radiusKm <= 100));
    }
  }
}